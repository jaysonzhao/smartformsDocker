* Â© Copyright IBM Corporation 2017
*
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.

STOP LISTENER('SYSTEM.DEFAULT.LISTENER.TCP')

ALTER  QMGR +
       AUTHOREV(DISABLED) +
       DEADQ('DLQ') +
       DEFXMITQ(' ') +
       DESCR(' ') +
       INHIBTEV(DISABLED) +
       LOCALEV(DISABLED) +
       MAXHANDS(256) +
       MAXUMSGS(10000) +
       PERFMEV(DISABLED) +
       REMOTEEV(DISABLED) +
       STRSTPEV(ENABLED) +
       TRIGINT(999999999) +
       MAXMSGL(104857600) +
       CHAD(DISABLED) +
       CHADEV(DISABLED) +
       CHADEXIT(' ') +
       CCSID(1208) +
       CLWLEXIT(' ') +
       CLWLDATA(' ') +
       REPOS(' ') +
       REPOSNL(' ') +
       CLWLLEN(100) +
       SSLCRLNL (' ') +
       CHLEV(DISABLED) +
       SSLEV(DISABLED) +
       SSLFIPS(NO) +
       IPADDRV(IPV4) +
       LOGGEREV(DISABLED) +
       SCHINIT(QMGR) +
       SCMDSERV(QMGR) +
       STATQ(OFF) +
       STATMQI(OFF) +
       STATCHL(OFF) +
       STATACLS(QMGR) +
       STATINT(1800) +
       ACCTQ(OFF) +
       ACCTMQI(OFF) +
       ACCTINT(1800) +
       ACCTCONO(DISABLED) +
       ROUTEREC(MSG) +
       ACTIVREC(MSG) +
       MONCHL(OFF) +
       MONQ(OFF) +
       MONACLS(QMGR) +
       CLWLMRUC(999999999) +
       CLWLUSEQ(LOCAL) +
       SSLRKEYC(0) +
       MARKINT(5000) +
       MAXPROPL(NOLIMIT) +
       PARENT(' ') +
       PSMODE(ENABLED) +
       PSRTYCNT(5) +
       PSNPMSG(DISCARD) +
       PSNPRES(NORMAL) +
       PSSYNCPT(IFPER) +
       TREELIFE(1800) +
       FORCE

ALTER  QMGR +
       AUTHOREV(DISABLED) +
       DEADQ('DLQ') +
       DEFXMITQ('SYSTEM.MQTT.TRANSMIT.QUEUE') +
       DESCR(' ') +
       INHIBTEV(DISABLED) +
       LOCALEV(DISABLED) +
       MAXHANDS(256) +
       MAXUMSGS(10000) +
       PERFMEV(DISABLED) +
       REMOTEEV(DISABLED) +
       STRSTPEV(ENABLED) +
       TRIGINT(999999999) +
       MAXMSGL(104857600) +
       CHAD(DISABLED) +
       CHADEV(DISABLED) +
       CHADEXIT(' ') +
       CCSID(1208) +
       CLWLEXIT(' ') +
       CLWLDATA(' ') +
       REPOS(' ') +
       REPOSNL(' ') +
       CLWLLEN(100) +
       SSLCRLNL (' ') +
       CHLEV(DISABLED) +
       SSLEV(DISABLED) +
       SSLFIPS(NO) +
       IPADDRV(IPV4) +
       LOGGEREV(DISABLED) +
       SCHINIT(QMGR) +
       SCMDSERV(QMGR) +
       STATQ(OFF) +
       STATMQI(OFF) +
       STATCHL(OFF) +
       STATACLS(QMGR) +
       STATINT(1800) +
       ACCTQ(OFF) +
       ACCTMQI(OFF) +
       ACCTINT(1800) +
       ACCTCONO(DISABLED) +
       ROUTEREC(MSG) +
       ACTIVREC(MSG) +
       MONCHL(OFF) +
       MONQ(OFF) +
       MONACLS(QMGR) +
       CLWLMRUC(999999999) +
       CLWLUSEQ(LOCAL) +
       SSLRKEYC(0) +
       MARKINT(5000) +
       MAXPROPL(NOLIMIT) +
       PARENT(' ') +
       PSMODE(ENABLED) +
       PSRTYCNT(5) +
       PSNPMSG(DISCARD) +
       PSNPRES(NORMAL) +
       PSSYNCPT(IFPER) +
       TREELIFE(1800) +
       FORCE

* Developer queues
DEFINE QLOCAL('DLQ') REPLACE
DEFINE QLOCAL('EIS.QUEUE.ALARM') REPLACE
DEFINE QLOCAL('EIS.QUEUE.ERROR') REPLACE
DEFINE QLOCAL('EIS.QUEUE.FILE.REPLY') REPLACE
DEFINE QLOCAL('EIS.QUEUE.LOG') REPLACE
DEFINE QLOCAL('EIS.QUEUE.LOG.EXPIRE') REPLACE
DEFINE QLOCAL('EIS.QUEUE.REQUEST.IN') REPLACE
DEFINE QLOCAL('EIS.QUEUE.REQUEST.IN.COMBINED') REPLACE
DEFINE QLOCAL('EIS.QUEUE.REQUEST.IN.PUB') REPLACE
DEFINE QLOCAL('EIS.QUEUE.REQUEST.IN.REVERSAL') REPLACE
DEFINE QLOCAL('EIS.QUEUE.REQUEST.IN.SINGLE') REPLACE
DEFINE QLOCAL('EIS.QUEUE.REQUEST.IN.COMBINED') REPLACE
DEFINE QLOCAL('EIS.QUEUE.REQUEST.OUT.WEBADMIN') REPLACE
DEFINE QLOCAL('EIS.QUEUE.REQUEST.PRECHECK') REPLACE
DEFINE QLOCAL('EIS.QUEUE.RESPONSE.EXPIRE') REPLACE
DEFINE QLOCAL('EIS.QUEUE.RESPONSE.IN') REPLACE
DEFINE QLOCAL('EIS.QUEUE.RESPONSE.OUT') REPLACE
DEFINE QLOCAL('EIS.QUEUE.RESPONSE.OUT.WEBADMIN') REPLACE

DEFINE QLOCAL('EIS.QUEUE.ADMIN.IN.CB') REPLACE
DEFINE QLOCAL('EIS.QUEUE.ADMIN.OUT.CB') REPLACE
DEFINE QLOCAL('EIS.QUEUE.ADMIN.IN.HRAD') REPLACE
DEFINE QLOCAL('EIS.QUEUE.ADMIN.OUT.HRAD') REPLACE
DEFINE QLOCAL('EIS.QUEUE.ERROR.HRAD') REPLACE
DEFINE QLOCAL('EIS.QUEUE.REQUEST.OUT.HRAD') REPLACE
DEFINE QLOCAL('EIS.QUEUE.RESPONSE.OUT.HRAD') REPLACE
DEFINE QLOCAL('EIS.QUEUE.ADMIN.IN.HRDBAD') REPLACE
DEFINE QLOCAL('EIS.QUEUE.ADMIN.OUT.HRDBAD') REPLACE
DEFINE QLOCAL('EIS.QUEUE.ERROR.HRDBAD') REPLACE
DEFINE QLOCAL('EIS.QUEUE.REQUEST.OUT.HRDBAD') REPLACE
DEFINE QLOCAL('EIS.QUEUE.RESPONSE.OUT.HRDBAD') REPLACE

* Use a different dead letter queue, for undeliverable messages
ALTER QMGR DEADQ('DEV.DEAD.LETTER.QUEUE')

* Developer topics

* Developer connection authentication
DEFINE AUTHINFO('DEV.AUTHINFO') AUTHTYPE(IDPWOS) CHCKCLNT(REQDADM) CHCKLOCL(OPTIONAL) ADOPTCTX(YES) REPLACE
ALTER QMGR CONNAUTH('DEV.AUTHINFO')
REFRESH SECURITY(*) TYPE(CONNAUTH)

* Developer channels (Application + Admin)
DEFINE CHANNEL('ESB.ADMIN.SVRCONN') CHLTYPE(SVRCONN) REPLACE
DEFINE CHANNEL('SVRCONN_BK') CHLTYPE(SVRCONN) REPLACE
DEFINE CHANNEL('SVRCONN_GW_IN') CHLTYPE(SVRCONN) REPLACE
DEFINE CHANNEL('SVRCONN_GW_OUT') CHLTYPE(SVRCONN) REPLACE

* Developer channel authentication rules
SET CHLAUTH('*') TYPE(ADDRESSMAP) ADDRESS('*') USERSRC(NOACCESS) DESCR('Back-stop rule - Blocks everyone') ACTION(REPLACE)
SET CHLAUTH('ESB.ADMIN.SVRCONN') TYPE(BLOCKUSER) USERLIST('nobody') DESCR('Allows admins on ADMIN channel') ACTION(REPLACE)
SET CHLAUTH('ESB.ADMIN.SVRCONN') TYPE(USERMAP) CLNTUSER('admin') USERSRC(CHANNEL) DESCR('Allows admin user to connect via ADMIN channel') ACTION(REPLACE)
ALTER CHL('ESB.ADMIN.SVRCONN') CHLTYPE(SVRCONN) MCAUSER('mqm')
ALTER CHL('SVRCONN_BK') CHLTYPE(SVRCONN) MCAUSER('mqm')
ALTER CHL('SVRCONN_GW_IN') CHLTYPE(SVRCONN) MCAUSER('mqm')
ALTER CHL('SVRCONN_GW_OUT') CHLTYPE(SVRCONN) MCAUSER('mqm')
START CHL('ESB.ADMIN.SVRCONN')
START CHL('SVRCONN_BK')
START CHL('SVRCONN_GW_IN')
START CHL('SVRCONN_GW_OUT')

* Developer TLS
ALTER QMGR CERTLABL('queuemanagercertificate')

* Developer listener
DEFINE LISTENER('LSR_ESB_QM') TRPTYPE(TCP) PORT(40001) CONTROL(QMGR) REPLACE
START LISTENER('LSR_ESB_QM')

* Auth
ALTER QMGR CHLAUTH(DISABLED)
ALTER QMGR CONNAUTH('')
REFRESH SECURITY TYPE(CONNAUTH)

* MQTT
DEFINE QLOCAL('SYSTEM.MQTT.TRANSMIT.QUEUE') USAGE(XMITQ) MAXDEPTH(100000)
ALTER QMGR DEFXMITQ('SYSTEM.MQTT.TRANSMIT.QUEUE')
DEFINE SERVICE(SYSTEM.MQXR.SERVICE) +
CONTROL(QMGR) +
DESCR('Manages clients using MQXR protocols such as MQTT') +
SERVTYPE(SERVER) +
STARTCMD('+MQ_INSTALL_PATH+/mqxr/bin/runMQXRService.sh') +
STARTARG('-m +QMNAME+ -d "+MQ_Q_MGR_DATA_PATH+" -g "+MQ_DATA_PATH+"') +
STOPCMD('+MQ_INSTALL_PATH+/mqxr/bin/endMQXRService.sh') +
STOPARG('-m +QMNAME+') +
STDOUT('+MQ_Q_MGR_DATA_PATH+/mqxr.stdout') +
STDERR('+MQ_Q_MGR_DATA_PATH+/mqxr.stderr')
START SERVICE(SYSTEM.MQXR.SERVICE)

DEFINE CHANNEL('PlainText') CHLTYPE(MQTT) PORT(1414) MCAUSER('mqm') PROTOCOL(MQTTV311, MQTTV3, HTTP)
